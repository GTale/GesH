' 修改后的命令处理部分
Sub ProcessCommands()
    ' 检查文件大小
    fileSize = GetFileSize(commandFile)
    
    ' 如果有新指令
    If fileSize > 0 Then
        ' 读取所有命令
        Dim commandData, commands
        commandData = ReadBinaryFile(commandFile)
        commands = Split(commandData, "|")
        
        ' 处理每个命令（不立即清空文件）
        Dim i, processedCount
        processedCount = 0
        
        For i = 0 To UBound(commands)
            If Trim(commands(i)) <> "" Then
                Dim parts, commandType, commandValue
                parts = Split(commands(i), "=", 2)
                commandType = parts(0)
                
                If UBound(parts) >= 1 Then 
                    commandValue = parts(1)
                Else
                    commandValue = ""
                End If
                
                ExecuteCommand commandType, commandValue
                processedCount = processedCount + 1
            End If
        Next
        
        ' 移除已处理命令
        If processedCount > 0 Then
            ' 只保留未处理命令
            Dim remainingCommands
            remainingCommands = ""
            
            For i = processedCount To UBound(commands)
                If Trim(commands(i)) <> "" Then
                    remainingCommands = remainingCommands & commands(i) & "|"
                End If
            Next
            
            ' 更新命令文件
            WriteBinaryFile commandFile, remainingCommands
        End If
    End If
End Sub

' 其他函数保持不变...

' VBA 模块代码 (修正版)
Option Explicit

' API声明
#If VBA7 Then
    Private Declare PtrSafe Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (ByVal lpMutexAttributes As Long, ByVal bInitialOwner As Long, ByVal lpName As String) As LongPtr
    Private Declare PtrSafe Function ReleaseMutex Lib "kernel32" (ByVal hMutex As LongPtr) As Long
    Private Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As LongPtr) As Long
    Private Declare PtrSafe Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As LongPtr, ByVal dwMilliseconds As Long) As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
    Private Declare Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (ByVal lpMutexAttributes As Long, ByVal bInitialOwner As Long, ByVal lpName As String) As Long
    Private Declare Function ReleaseMutex Lib "kernel32" (ByVal hMutex As Long) As Long
    Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
    Private Declare Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

Const INFINITE = &HFFFF
Const WAIT_ABANDONED = &H80
Const WAIT_OBJECT_0 = 0
Const WAIT_TIMEOUT = &H102

' 全局常量
Const POLL_INTERVAL As Integer = 10  ' 10ms轮询间隔
Const MAX_WAIT_MS As Long = 5000     ' 5秒超时
Const TEMP_FOLDER As String = "C:\Temp\" 
Const MUTEX_NAME As String = "Global\PCommVBSMutex"

' 修正的WriteBinaryFile函数 - 追加模式
Sub AppendToBinaryFile(filePath As String, content As String)
    Dim fileNum As Integer
    fileNum = FreeFile
    
    ' 打开文件追加写入
    Open filePath For Append As #fileNum
    Print #fileNum, content;
    Close #fileNum
End Sub

' 使用互斥锁的文件操作
Function SendCommandWithLock(cmdType As String, Optional cmdValue As String = "") As String
    #If VBA7 Then
        Dim hMutex As LongPtr
    #Else
        Dim hMutex As Long
    #End If
    
    Dim commandFile As String, resultFile As String
    commandFile = TEMP_FOLDER & "PCommCmd.dat"
    resultFile = TEMP_FOLDER & "PCommRes.dat"
    
    ' 创建或打开互斥锁
    hMutex = CreateMutex(0, 0, MUTEX_NAME)
    
    ' 等待获取锁
    If WaitForSingleObject(hMutex, MAX_WAIT_MS) <> WAIT_OBJECT_0 Then
        SendCommandWithLock = "ERROR=获取锁超时"
        CloseHandle hMutex
        Exit Function
    End If
    
    On Error GoTo Cleanup
    
    ' 删除结果文件（如果存在）
    If Dir(resultFile) <> "" Then Kill resultFile
    
    ' 追加命令到文件（而不是覆盖）
    AppendToBinaryFile commandFile, cmdType & "=" & cmdValue & "|"
    
    ' 开始性能计时
    Dim startTime As Double
    startTime = Timer
    
    ' 等待响应
    Dim response As String, elapsed As Double
    Do
        If Dir(resultFile) <> "" Then
            response = ReadBinaryFile(resultFile)
            If InStr(response, cmdType & "=") > 0 Then
                SendCommandWithLock = ExtractResult(response)
                Exit Do
            End If
        End If
        
        ' 检查超时
        elapsed = (Timer - startTime) * 1000
        If elapsed > MAX_WAIT_MS Then
            SendCommandWithLock = "ERROR=超时等待响应 (" & elapsed & "ms)"
            Exit Do
        End If
        
        ' 短间隔等待
        Sleep POLL_INTERVAL
    Loop
    
Cleanup:
    ' 释放互斥锁
    ReleaseMutex hMutex
    CloseHandle hMutex
End Function

' 文件读取函数（保持不变）
Function ReadBinaryFile(filePath As String) As String
    If Dir(filePath) = "" Then Exit Function
    
    Dim content As String
    Open filePath For Binary As #1
    content = Space(LOF(1))
    Get #1, , content
    Close #1
    
    ReadBinaryFile = content
End Function

' VBS端也需要相应修改以处理多个命令
