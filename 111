# Add user32 APIs: EnumChildWindows, GetClassName
Add-Type @"
using System;
using System.Text;
using System.Runtime.InteropServices;

public class User32 {
    public delegate bool EnumChildProc(IntPtr hWnd, IntPtr lParam);

    [DllImport("user32.dll")]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool EnumChildWindows(IntPtr hWndParent, EnumChildProc lpEnumFunc, IntPtr lParam);

    [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    public static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);
}
"@

# Function to get class name from HWND
function Get-ClassName {
    param([IntPtr]$hwnd)
    $sb = New-Object System.Text.StringBuilder 256
    [User32]::GetClassName($hwnd, $sb, $sb.Capacity) | Out-Null
    return $sb.ToString()
}

# Example: Root HWND (replace with your parent HWND)
$rootHwnd = [IntPtr]::Zero   # desktop, or use another hwnd

# Store results
$matches = @()

# Callback for EnumChildWindows
$callback = [User32+EnumChildProc]{
    param([IntPtr] $hWnd, [IntPtr] $lParam)

    $cls = Get-ClassName $hWnd
    if ($cls -like "*aaa*") {
        $GLOBALS:matches += $hWnd
    }

    return $true # continue enumeration
}

# Enumerate children
[User32]::EnumChildWindows($rootHwnd, $callback, [IntPtr]::Zero)

Write-Host "Found child HWNDs:" $matches
